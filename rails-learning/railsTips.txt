Reference Books :
    Ruby : 
        Peter Cooper (320 Pages)
    Rails : 
        Agile Web Development with rails
        Beginning Rails 4
        Crafting Rails 4 Application
        ruby on rails tutorials : Michael Hartl

        Rails 4 Way (Reference : O.B.Fernandis)

    Test Driven Development (TDD) : rspewith Ruby

Videos :
    railscast.com
    gorails.com


1.  Steps to create an ideal Rails App :

$ mkdir myapp
$ cd myapp
$ rvm use ruby-2.3.0@myapp --ruby-version --create
$ gem install rails
$ rails new .

2. Common Errors encountered in rails :

i) Unable to Connect :
    - Check whether the server is running
ii) Routing Error : Route is not registered
    - Go To : config/routes.rb 
    - register route
iii) Unknown action : action could not be found in controller
    - Add the action in specified controller
iv) Template Missing :
    - Create the View File


3. rails generate model Project client_id:integer name:string description:text start_date:date end_date:date status:string

4. rake db:migrate

5. begin
     project = Project.find(1000)
        rescue ActiveRecord::RecordNotFound
        puts "Project with id not Found"
   end

6. Update is always a 2-step process.
    - We first find the record and then update it.
    project = Project.find(1)
    project.status = "completed"
    project.save

    OR

    project = Project.find(2)
    project.update_attributes(status: "on-going", end_date: Date.today + 2.months)

    - While updating, We can either update a Single Object or an Array of Objects.
    - In case of an array of objects, We need to iterate through the array and perform the update for each of the elements.

7. Objects are usually destroyed, when destroy method is called, The row is deleted from the DB But you still have access to the object. This object is in a Frozen State which can only be read and not be updated.
Object can be read as long as in the memory.

8. Associations Types :
    - has_one
    - has_many : when a row in one table is related to one or more rows in another table
    - belongs_to
    - has_and_belongs_to_many / has_many:through

9. client = Client.first
    - client.projects : returns array of all the projects that belong to client, empty if none
    - client.projects.empty? : returns true/false
    - client.projects.size : returns number of Projects asociated with the Client
    - client.project_ids
    - client.projects.pluck(:id)

10. Lazy Loading : One Query for each Project
    Project.all.each do |project|
        puts "#{project.name} : #{project.client.try(:name)}"
    end

    Eager Loading : 
    Project.includes(:client).each do |project|
        puts "#{project.name} : #{project.client.try(:name)}"
    end

11. belongs_to holds the Foriegn-Key reference to the other Entity

12. Create tasks on the Fly with these has_many association features :
    project.tasks.create(title: "Requirement Specifications", due_date: Date.today, is_completed: false)
    task = project.tasks.build

13. Has and Belongs to Many (Has Many Through) :
    - where two tables are connected to multiple rows on both sides

14. Creating a Model involves :
    - Create Model
    - Run rake db:migrate
    - Define associations

15. Validation Error Messages :
    - client.errors.full_messages : To get error messages
    - client.save(validate: false) : To by-pass validations

16. Validate for Project Name, Start Date, End Date, Client ID, Length of the name should be more 5Characters, Check for uniqueness of project_name, end_date > start_date, 10 < description > 100 Characters, if the start_date > today, project_status != completed

17. REST => Representational State Transfer Protocol
        - Offers a better interface for client-server operations
        - REST princliple is based on working with information in the form of resources
        - There are 7 REST Actions (index, new, create, edit, update, show, destroy)
        Ex. : For clients

        URL : http://localhost:3000/clients
        Method : get
        Action : index : listing resources

        URL : http://localhost:3000/clients/new
        Method : get
        Action : new : setting up a form to add a new resource

        URL : http://localhost:3000/clients
        Method : post
        Action : create : saving the resource

        URL : http://localhost:3000/clients/1/edit
        Method : get
        Action : edit : to show the resource in the form for editing

        URL : http://localhost:3000/clients/1
        Method : put
        Action : update : updating the edited resource

        URL : http://localhost:3000/clients/1
        Method : get
        Action : show : to show the resource along with its associated resources

        URL : http://localhost:3000/clients/1
        Method : delete
        Action : destroy : destroy the resource

18. Life Cycle of an Object :

CallBack is used :
During the life cycle of an Object If we want to change any data on that Object.

19. Steps to install authentication gem (devise) :

i. Add to Gemfile
ii. bundle install
iii. rails generate devise:install
iv. Follow the instructions from step iii
v. Setup the User model using : rails generate devise User
vi. rake db:migrate

20. In many Organisations, Templating engine happens to be .haml instead of .erb

21. Whenever there is an HTML file in the layouts folder, that matches the name of the controller, then that controller will use its own layout and does not depend on application.html.erb

22. Layouts can be shifted at the controller level as well as the actions level.

In controller level, We use the method 'layout <layout_name>' at the beginning of the file. In the action level, We use the method 'render :<layout_name>' at the end of the action.

=> Assignment : 

1. Timeline : Task_Name, Project_start_date, Task_due_date

2. Line chart for tasks in general : Date v/s Task-due date

3. Multiple line Series : Plot project end dates for each client

23. During instance level caching(||=), the return-type will be a Hash instead of an Object while assignment (=)

24. CanCan Gem : For Authorization 
    - rails g cancan:ability

25. rails g scaffold ModelName att1:type att2:type att3:type

26. Gems for Backend Admin
    -ActiveAdmin 
    -Administrate